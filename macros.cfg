#####################################################################
# 	Macros
#####################################################################

[gcode_macro test_speed_fast]
default_parameter_SPEED: 300            # speed
default_parameter_ACCEL: 3000           # acceleration
default_parameter_SC: 4.0               # square corner velocity
default_parameter_XMIN: 10              # min x
default_parameter_XMAX: 340             # max x
default_parameter_YMIN: 10              # min y
default_parameter_YMAX: 340             # max y
default_parameter_CURRENT: 1.27          # stepper current (amps)
gcode:
    M117 Running speed test
    SAVE_GCODE_STATE NAME=test_speed_fast_state

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={CURRENT} HOLDCURRENT={CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={CURRENT} HOLDCURRENT={CURRENT}

    G90
    SET_VELOCITY_LIMIT VELOCITY=200 ACCEL=1000 ACCEL_TO_DECEL=1000 SQUARE_CORNER_VELOCITY=4.0
    M400
    G28 X0 Y0
    GET_POSITION
    G1 F100000

    G1 X{XMIN} Y{YMIN}
    SET_VELOCITY_LIMIT VELOCITY={SPEED} ACCEL={ACCEL} ACCEL_TO_DECEL={ACCEL|float / 2} SQUARE_CORNER_VELOCITY={SC}

    {% for i in range(2) %}
        G1 X{XMAX} Y{YMAX}
        G1 X{XMIN} Y{YMIN}
    {% endfor %}

    G1 X{XMIN} Y{YMAX}

    {% for i in range(2) %}
        G1 X{XMIN} Y{YMAX}
        G1 X{XMAX} Y{YMIN}
    {% endfor %}

    G1 X{XMIN} Y{YMAX}
    G1 X{XMIN} Y{YMIN}
    G1 X{XMAX} Y{YMAX}
    G1 X{XMIN} Y{YMAX}
    G1 X{XMIN} Y{YMIN}

    SET_VELOCITY_LIMIT VELOCITY=200 ACCEL=1500 ACCEL_TO_DECEL=1000 SQUARE_CORNER_VELOCITY=4.0
    M400
    G28 X0 Y0
    GET_POSITION
    RESTORE_GCODE_STATE NAME=test_speed_fast_state

# set this as your filament specific gcode in superslicer. it will then run
# after your start print gcode, but once the chamber temp has been reached it
# will continue with START_PRINT_POST
[gcode_macro INITIALIZE_FILAMENT]
gcode: 
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M400
        G28             ; home
    {% endif %}
    {% if params.TYPE == 'abs' %}
        M191 S35      ; wait for chamber temp
        BED_MESH_PROFILE LOAD=high_temp
        {% if params.BRAND == 'kvp' %}
            SET_PRESSURE_ADVANCE ADVANCE=0.056
        {% elif params.BRAND == 'paramount' %}
            #TODO: needs calibrating
        {% endif %}  

    {% elif params.TYPE == 'pla' %}
        M191 S0      ; disable chamber temp wait
        BED_MESH_PROFILE LOAD=low_temp
        {% if params.BRAND == 'overture' %}
            #TODO: needs calibrating
        {% endif %}  

    {% elif params.TYPE == 'plapro' %}
        M191 S0      ; disable chamber temp wait
        BED_MESH_PROFILE LOAD=low_temp
        {% if params.BRAND == 'overture' %}
            #TODO: needs calibrating
        {% endif %}  

    {% elif params.TYPE == 'petg' %}
        M191 S0      ; disable chamber temp wait
        BED_MESH_PROFILE LOAD=high_temp
        SET_GCODE_OFFSET Z_ADJUST=0.04 MOVE=1  ; don't squish petg as much
        {% if params.BRAND == 'overture' %}
            SET_PRESSURE_ADVANCE ADVANCE=0.09
        {% endif %}  

    {% endif %}  

# set this as your start print gcode in your slicer. this approach also relies on
# INITIALIZE_FILAMENT being set in the slicer too.
[gcode_macro START_PRINT]
gcode:
    M117 Preparing print
    CLEAR_PAUSE
    G90             ; absolute positioning
    M82             ; absolute extruder mode
    M107            ; turn fan off
    BED_MESH_CLEAR  ; clear any bed mesh

    {% if params.BED %}
        M117 Waiting for bed temp
        M140 S{params.BED}         ; set bed final temp
        M190 S{params.BED}         ; wait for bed final temp
    {% endif %}
    {% if params.EXTRUDER %}
        M117 Waiting for extruder temp
        M104 S{params.EXTRUDER}    ; set extruder final temp
        M109 S{params.EXTRUDER}    ; wait for extruder final temp
    {% endif %}
    
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M117 Homing
        M400
        G28             ; home
    {% endif %}
    NOZZLE_CLEAN
    QUAD_GANTRY_LEVEL
    # PRIME_LINE
    M117 Printing

# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode: 
    M117 Priming Line
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M400
        G28             ; home
    {% endif %}
    SAVE_GCODE_STATE NAME=PRIME_LINE_state
    G90                                 ; absolute positioning
    G92 E0                              ; reset extruder
    G1 Z5.0 F3000                       ; move Z Axis up
    G1 X10 Y10 Z0.24 F5000.0            ; move to start position
    G1 X10 Y200 Z0.24 F1500.0 E15       ; draw the first line
    G1 X10.4 Y200 Z0.24 F5000.0         ; move to side a little
    G1 X10.4 Y10 Z0.24 F1500.0 E30      ; draw the second line
    G92 E0                              ; reset Extruder
    G1 Z5.0 F3000                       ; move Z Axis up
    RESTORE_GCODE_STATE NAME=PRIME_LINE_state

[gcode_macro END_PRINT]
gcode:
    M117 Ending print
    M400            ; wait for buffer to clear
    PARK
    M107            ; turn fan off
    TURN_OFF_HEATERS
    M84             ; turn off all motors
    BED_MESH_CLEAR    
    M117 Complete!

# Filament change
[gcode_macro M600]
gcode:
    M117 Filament change
    PAUSE
    UNLOAD

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_X: 175 
default_parameter_Y: 20
default_parameter_Z: 10
default_parameter_E: 1
gcode:
    M117 Pausing
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    RESPOND TYPE=command MSG=action:paused
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F10000
    G91
    SET_IDLE_TIMEOUT TIMEOUT=3600
    M117 Paused

[gcode_macro RESUME]
rename_existing: BASE_RESUME
default_parameter_E: 1
gcode:
    M117 Resuming
    SET_IDLE_TIMEOUT TIMEOUT=600
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    RESPOND TYPE=command MSG=action:resumed
    M117 Printing
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Cancelling
    TURN_OFF_HEATERS
    M107    ; turn off fan
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    PARK
    M117 Cancelled

[gcode_macro PARK]
default_parameter_X: 340
default_parameter_Y: 340
default_parameter_Z: 10
default_parameter_E: 1
gcode:
    M117 Parking
    SAVE_GCODE_STATE NAME=PARK_MACRO_state
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000
    RESTORE_GCODE_STATE name=PARK_MACRO_state
    M117 Parked

[gcode_macro PURGE]
gcode:
    M117 Purging
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                 ; relative positioning
    {% for i in range(2) %}
        G1 E50 F500      ; extrude a little more
    {% endfor %}
    RESTORE_GCODE_STATE name=PURGE_state
    M117 Purged


[gcode_macro Z_ENDSTOP_CALIBRATE]
rename_existing: BASE_Z_ENDSTOP_CALIBRATE
gcode:
    M117 Calibrating Z Endstop
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M400
        G28             ; move to origin
    {% endif %}
    # NOZZLE_CLEAN
    QUAD_GANTRY_LEVEL
    M400
    G28 Z
    G1 X175 Y153 Z10 F20000 ; align with bed mesh relative index
    BASE_Z_ENDSTOP_CALIBRATE

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
    M117 Levelling
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M400
        G28             ; move to origin
    {% endif %}

    BASE_QUAD_GANTRY_LEVEL
    
    M400
    G28             ; move to origin
    G0 X175 Y175 Z50 F20000	; move to center
    
    restore_and_wait_bed_temp          ; temp is stored as part of probing
    restore_and_wait_extruder_temp     ; temp is stored as part of probing
    M117 Levelling complete

# Bed mesh
[gcode_macro BED_MESH]
gcode:
    M117 Generating bed mesh
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE={params.NAME}
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        M400
        G28             ; move to origin
    {% endif %}
    
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={params.NAME}
    SAVE_CONFIG

[gcode_macro SET_CASELIGHT]
# Control chamber LED, 0.0-1.0
default_parameter_S=1.0
gcode:
    set_pin pin=caselight value={S}


[gcode_macro NOZZLE_CLEAN]
default_parameter_START_X: 60
default_parameter_START_Y: 355
default_parameter_END_X: 140
default_parameter_END_Y: 355
default_parameter_Z: 3
default_parameter_SPEED: 20000
gcode:
    M117 Cleaning nozzle
    SAVE_GCODE_STATE NAME=NOZZLE_CLEAN
    {% if "z" not in printer.toolhead.homed_axes %}
        M400
        G28                     ; Only G28 Home if needed
    {% endif %}
    G91             ; relative positioning
	G0 Z10 F3000                ; lift nozzle
    G90             ; absolute positioning
	G0 X{START_X} Y{START_Y} F10000       ; move to nozzle brush
    {% if printer.extruder.target > 100 %}
        M109 S{printer.extruder.target} ; wait for previous M104          
    {% elif printer.extruder.temperature < 200 %}
        M109 S200               ; Wait for min E temp
    {% endif %}
    M83                         ; set extruder to relative
    G1 E3 F300                  ; extrude a little to soften tip
    G1 E-4 F300                 ; retract filament 4mm
	G0 Z{Z} F3000                 ; move nozzle into brush
    {% for i in range(10) %} ; wipe nozzle across brush
        {% for coordinate in [(START_X,START_Y),(END_X,END_Y)] %}
            G0 X{coordinate[0]} Y{coordinate[1]} F{SPEED}
        {% endfor %}
    {% endfor %}
	G0 Z30 F3000                ; lift z 30mm
    M400
    G28 Z                       ; force another Z home incase first one had filament in the way
    RESTORE_GCODE_STATE NAME=NOZZLE_CLEAN
    M117 Cleaning complete
    
#Wait for chamber temp, kick off wait loop if not already at temp
[gcode_macro M191]
default_parameter_S: 0
variable_chambertargettemp: 0
gcode:
    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={S}                   ; set target temp for reference outside of the macro (for the loop)
    
    {% if not printer["temperature_fan chamber"].temperature >= S|int %}    ; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
        { action_respond_info("Chamber not at temp yet, pausing...") }
            {% if not printer.pause_resume.is_paused %}
                PAUSE                                                                   ; pause if not already paused
            {% endif %}
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                   ; start wait loop
    {% else %}
        { action_respond_info("Chamber at or above temp, continuing...") }             ; ##IF CHAMBER TEMP IS ALREADY REACHED##
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=0                                   ; break wait loop if it happens to be running already (shouldn't be)
        {% if printer.pause_resume.is_paused %}
            RESUME                                                                       ; resume if paused (shouldn't be)
        {% endif %}
    {% endif %}

#This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-Wait]
gcode:
    {% if printer["temperature_fan chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|int %} ; ##IF CHAMBER TEMP IS REACHED##
        { action_respond_info("Chamber at or above temp, continuing...") }
            {% if printer.pause_resume.is_paused %}
                RESUME                                                                                                        ; break loop, resume print
            {% endif %}
    {% else %}                                                                                                             ; ##IF CHAMBER TEMP IS NOT YET REACHED##
        { action_respond_info("Chamber not at temp yet, waiting...") }
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                                                        ; continue waiting loop
    {% endif %}
  
